<!--

 * Copyright (c) 2015 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 -->
<project name="rpackages" default="usage" basedir=".">

    <antversion property="ant.version.check" atleast="1.8.0" />
    <fail message="Please use Ant 1.8.0 or greater. A copy is checked in to LABKEY_ROOT/external/ant" unless="ant.version.check" />

    <property name="rpackages.dir" location="${ant.file}/.."/>
    <property name="deployment.timestamp.file" location="${rpackages.dir}/rPackagesDeployment.timestamp"/>
    <property name="project.root" location="${rpackages.dir}/../.."/>
    <condition property="windows" value="true">
        <os family="windows" />
    </condition>
    <condition property="unix" value="true">
        <os family="unix" />
    </condition>
    <property environment="env"/>
    <condition property="r.libs.user" value="${env.R_LIBS_USER}">
        <isset property="env.R_LIBS_USER"/>
    </condition>

    <target name="clean-rpackages">
        <delete failonerror="false" dir="${r.libs.user}"/>
        <delete failonerror="false" file="${deployment.timestamp.file}" verbose="true" />
    </target>

    <!-- Rely on our own private file that we touch every time we install R packages to see if they need to be reinstalled -->
    <target name="install-rpackages" depends="locate-R">
        <uptodate targetfile="${deployment.timestamp.file}" property="rPackagesUpToDate">
            <srcfiles dir="${rpackages.dir}" />
        </uptodate>
        <antcall target="install-rpackages-if-dirty" />
    </target>

    <target name="install-rpackages-if-dirty" unless="rPackagesUpToDate">
        <antcall target="install-rlabkey" />
        <antcall target="install-ruminex" />
        <antcall target="install-flowWorkspace" />
        <antcall target="install-flowStats" />
        <antcall target="install-knitr" />
        <antcall target="install-ehr-dependencies" />
        <antcall target="install-rsurvival" />
        <touch file="${deployment.timestamp.file}" />
    </target>

    <macrodef name="check-R-package-installed">
        <attribute name="package" />
        <attribute name="property" default="@{package}"/>
        <sequential>
            <exec executable="${r.path}" dir="${r.libs.user}"
                  input="${rpackages.dir}/check-installed.R"
                  failifexecutionfails="true" searchpath="true"
                  resultproperty="@{property}.exitcode">
                <arg line="--slave --vanilla --args @{package}"/>
            </exec>

            <uptodate targetfile="${r.libs.user}/@{package}" property="@{property}.uptodate">
                <srcfiles dir="${rpackages.dir}">
                    <include name="@{package}*.tar.gz" />
                    <include name="install-@{package}-depdendencies.R" />
                </srcfiles>
            </uptodate>

            <condition property="@{property}.installed" value="true">
                <and>
                    <equals arg1="${@{property}.exitcode}" arg2="0" />
                    <isset property="@{property}.uptodate" />
                </and>
            </condition>

            <condition property="@{property}.uninstalled" value="true">
                <or>
                    <equals arg1="${@{property}.exitcode}" arg2="1" />
                    <not><isset property="@{property}.uptodate" /></not>
                </or>
            </condition>
        </sequential>
    </macrodef>

    <target name="check-rlabkey-installed" if="R.present" depends="locate-R">
        <check-R-package-installed package="Rlabkey" />
    </target>

    <target name="install-rlabkey-init">
        <mkdir dir="${r.libs.user}"/>
        <copy todir="${r.libs.user}">
            <fileset dir="${project.root}/remoteapi/r/test">
                <include name="listArchive.zip"/>
                <include name="vignette.R"/>
                <include name="instwin.r" />
            </fileset>
        </copy>
    </target>

    <target name="install-rlabkey" depends="install-rlabkey-init, install-rlabkey-binary, install-rlabkey-source">
    </target>

    <target name="install-rlabkey-dependencies" if="R.present" depends="check-rlabkey-installed">
        <exec executable="${r.path}" dir="${r.libs.user}" failifexecutionfails="true" searchpath="true"
              input="${rpackages.dir}/install-rlabkey-dependencies.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

    <target name="install-rlabkey-binary" if="Rlabkey.uninstalled" unless="unix" depends="install-rlabkey-dependencies">
        <copy todir="${r.libs.user}" overwrite="true">
            <fileset  dir="${project.root}/remoteapi/r/latest" includes="Rlabkey*.zip"/>
        </copy>
        <exec dir="${r.libs.user}" executable="${rterm.path}" osfamily="windows"
              input="${r.libs.user}/instwin.r" failifexecutionfails="false">
            <arg line="--vanilla --quiet" />
        </exec>
    </target>

    <target name="install-rlabkey-source" if="Rlabkey.uninstalled" unless="windows" depends="install-rlabkey-dependencies">
        <copy tofile="${r.libs.user}/Rlabkey.tar.gz" overwrite="true">
            <fileset  dir="${project.root}/remoteapi/r/latest" includes="Rlabkey*.tar.gz"/>
        </copy>
        <exec executable="${r.path}" dir="${r.libs.user}" failifexecutionfails="false" searchpath="true">
            <arg line="CMD INSTALL -l ${r.libs.user} ${r.libs.user}/Rlabkey.tar.gz"/>
        </exec>
    </target>

    <target name="check-ruminex-installed" if="R.present" depends="locate-R">
        <check-R-package-installed package="Ruminex" />
    </target>

    <target name="install-ruminex-dependencies" if="Ruminex.uninstalled" depends="check-ruminex-installed">
        <exec executable="${r.path}" dir="${r.libs.user}" failifexecutionfails="true" searchpath="true"
              input="${rpackages.dir}/install-ruminex-dependencies.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

    <target name="install-ruminex" if="Ruminex.uninstalled" depends="install-ruminex-dependencies">
        <copy tofile="${r.libs.user}/Ruminex.tar.gz" overwrite="true">
            <fileset  dir="${rpackages.dir}" includes="Ruminex*.tar.gz"/>
        </copy>
        <exec executable="${r.path}" dir="${r.libs.user}"  failifexecutionfails="false" searchpath="true">
            <arg line="CMD INSTALL -l ${r.libs.user} ${r.libs.user}/Ruminex.tar.gz" />
        </exec>
    </target>

    <target name="check-flowStats-installed" if="R.present" depends="locate-R">
        <check-R-package-installed package="flowStats"/>
    </target>

    <target name="install-flowStats" if="flowStats.uninstalled" depends="check-flowStats-installed, install-flowWorkspace">
        <exec executable="${r.path}" dir="${r.libs.user}" failifexecutionfails="false" searchpath="true"
              input="${rpackages.dir}/install-flowStats.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

    <target name="install-knitr" if="R.present" depends="check-rlabkey-installed">
        <exec executable="${r.path}" dir="${r.libs.user}" failifexecutionfails="true" searchpath="true"
              input="${rpackages.dir}/install-knitr.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

    <target name="install-ehr-dependencies" if="R.present" depends="check-rlabkey-installed">
        <exec executable="${r.path}" dir="${r.libs.user}" failifexecutionfails="true" searchpath="true"
              input="${rpackages.dir}/install-ehr-dependencies.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

    <target name="check-flowWorkspace-installed" if="R.present" depends="locate-R">
        <check-R-package-installed package="flowWorkspace"/>
    </target>

    <target name="install-flowWorkspace" if="flowWorkspace.uninstalled" depends="check-flowWorkspace-installed">
        <exec executable="${r.path}" dir="${r.libs.user}" failifexecutionfails="false" searchpath="true"
              input="${rpackages.dir}/install-flowWorkspace.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

    <target name="install-rsurvival" if="R.present" depends="check-rlabkey-installed">
        <exec executable="${r.path}" dir="${r.libs.user}" failifexecutionfails="true" searchpath="true"
              input="${rpackages.dir}/install-survival.R">
            <arg line="--vanilla --quiet"/>
        </exec>
    </target>

    <target name="locate-R">
        <condition property="r.path" value="${env.R_HOME}/bin/R.exe"><available file="${env.R_HOME}/bin/R.exe"/></condition>
        <condition property="r.path" value="${env.R_HOME}/bin/R"><available file="${env.R_HOME}/bin/R"/></condition>
        <condition property="r.path" value="${env.R_HOME}/R.exe"><available file="${env.R_HOME}/R.exe"/></condition>
        <condition property="r.path" value="${env.R_HOME}/R" else="R">
            <and>
                <not><isset property="r.path" /></not>
                <isset property="env.R_HOME"/>
            </and>
        </condition>

        <condition property="rterm.path" value="${env.R_HOME}/Rterm.exe"><available file="${env.R_HOME}/Rterm.exe"/></condition>
        <condition property="rterm.path" value="${env.R_HOME}/bin/Rterm.exe"><available file="${env.R_HOME}/bin/Rterm.exe"/></condition>
        <condition property="rterm.path" value="${env.R_HOME}/bin/i386/Rterm.exe"><available file="${env.R_HOME}/bin/i386/Rterm.exe"/></condition>
        <condition property="rterm.path" value="${env.R_HOME}/bin/x64/Rterm.exe"><available file="${env.R_HOME}/bin/x64/Rterm.exe"/></condition>

        <condition property="R.present">
            <or>
                <and>
                    <isset property="windows"/>
                    <available file="${rterm.path}"/>
                </and>
                <and>
                    <isset property="unix"/>
                    <available file="${r.path}"/>
                </and>
            </or>
        </condition>
        <echo message="r.path: ${r.path}"/>
        <echo message="rterm.path: ${rterm.path}"/>
        <antcall target="fail_R"/>
        <antcall target="mk_R_LIBS_USER"/>
    </target>

    <target name="mk_R_LIBS_USER" if="r.libs.user" depends="warn_R_LIBS_USER">
        <mkdir dir="${r.libs.user}"/>
    </target>

    <target name="warn_R_LIBS_USER" unless="r.libs.user">
        <echo message="Unable to create R package install directory. Please ensure that R_LIBS_USER is defined or specify r.libs.user when running."/>
    </target>

    <target name="fail_R" unless="R.present">
        <echo message="Unable to locate R.exe and/or Rterm.exe.  Please ensure that R is installed and R_HOME is configured correctly."/>
    </target>
</project>
