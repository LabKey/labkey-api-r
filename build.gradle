import org.apache.tools.ant.taskdefs.condition.Os
import org.labkey.gradle.task.CopyAndInstallRPackage
import org.labkey.gradle.task.InstallRPackage
import org.labkey.gradle.util.GroupNames

buildscript {
    repositories {
        maven {
            url "${artifactory_contextUrl}/plugins-release"
        }
        if (gradlePluginsVersion.contains("SNAPSHOT"))
        {
            maven {
                url "${artifactory_contextUrl}/plugins-snapshot-local"
            }
        }
    }
    dependencies {
        classpath "org.labkey.build:gradlePlugins:${gradlePluginsVersion}"
    }
    configurations.all {
        // Check for updates every build for SNAPSHOT dependencies
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

File latestDir = project.file("latest");
File buildOutputFile = new File(project.buildDir, "commands.out")
String rLibsUserPath = InstallRPackage.getRLibsUserPath(project)
String rExe = InstallRPackage.getRPath()

project.task(
        "check",
        group: "RBuild",
        description: "Run validation checks on the Rlabkey package",
        {Task task ->
            task.outputs.dir project.file("${latestDir}/Rlabkey.Rcheck")
            task.outputs.dir project.file("Rlabkey/src-i386")
            task.outputs.dir project.file("Rlabkey/src-x64")
            task.outputs.files project.fileTree(dir: "Rlabkey/src", includes: ["*.o", "*.dll"])
        }

).doLast {
    project.ant.exec(executable: rExe, output: buildOutputFile, append: true)
                {
                    arg(line:"CMD check --no-examples --as-cran ${latestDir}/*.tar.gz")
                }
}


project.task(
        "build",
        group: "RBuild",
        description: "Build the Rlabkey package that can be installed and tested in R. Builds binary package on windows, source only on unix",
        {Task task ->
            task.inputs.files project.fileTree(dir: "Rlabkey", excludes: ["src-i386", "src-x64"]).files
            task.outputs.dir project.buildDir
            task.doFirst(
                    {
                        project.buildDir.mkdirs()
                        project.ant.exec(executable: rExe, dir: project.buildDir, output: buildOutputFile, append: true)
                        {
                            arg(line: "CMD build ${project.projectDir}/Rlabkey")
                            if (rLibsUserPath != null)
                                env(key: "R_LIBS_USER", value: rLibsUserPath)
                        }
                        project.copy {CopySpec copy ->
                            copy.from project.buildDir
                            copy.include '*.tar.gz'
                            copy.into latestDir
                        }
                        if (isWindows)
                        {
                            project.ant.exec(executable: rExe, dir: project.buildDir, output: buildOutputFile, append: true)
                            {
                                arg(line: "CMD INSTALL --build ${project.projectDir}/build/*.tar.gz")
                                if (rLibsUserPath != null)
                                    env(key: "R_LIBS_USER", value: rLibsUserPath)
                            }
                        }
                        project.copy {CopySpec copy ->
                            copy.from project.buildDir
                            copy.include '*.zip'
                            copy.into latestDir
                        }
                    }
            )
        }
)

project.tasks.check.dependsOn(project.tasks.build)

project.task(
        "clean",
        group: "RBuild",
        description: "Deletes all non-versioned files generated during the build process",
        type: Delete,
        {
            delete project.tasks.check
            delete project.tasks.build
        }
)

if (rLibsUserPath != null) {
    project.tasks.register("cleanRLibsUser", Delete) {
        Delete task ->
            task.group = GroupNames.DEPLOY
            task.description = "Delete user directory containing R libraries (${rLibsUserPath})"
            task.configure({
                DeleteSpec delete ->
                    if (rLibsUserPath != null && new File(rLibsUserPath).exists())
                        delete.delete rLibsUserPath
            })
    }
}

project.tasks.register("installRLabKey", CopyAndInstallRPackage) {
    CopyAndInstallRPackage task ->
        task.group = GroupNames.DEPLOY
        task.description = "Install RLabKey and its dependencies"
        task.packageNames = ["Rlabkey"]
        task.installScript = "test/install-rlabkey-dependencies.R"
        task.sourceDir = latestDir
        task.dependsOn(project.task("build"))
        task.doFirst {
            project.copy {
                CopySpec copy ->
                    copy.from(project.file('test'))
                    copy.into(rLibsUserPath)
                    copy.include("listArchive.zip")
                    copy.include("vignette.R")
                    copy.include("instwin.r")
            }
        }
}

project.tasks.register("installRuminex", CopyAndInstallRPackage) {
    CopyAndInstallRPackage task ->
        task.group = GroupNames.DEPLOY
        task.description = "Install Ruminex and its dependencies"
        task.packageNames = ["Ruminex"]
        task.installScript = "test/install-ruminex-dependencies.R"
        task.sourceDir = project.file("test")
}

project.tasks.register("installKnitr",InstallRPackage) {
    InstallRPackage task ->
        task.group = GroupNames.DEPLOY
        task.description = "Install knitr and its dependencies"
        task.packageNames = ["knitr", "rmarkdown"]
        task.installScript = "test/install-knitr.R"
}

project.tasks.register("installEhrDependencies",InstallRPackage) {
    InstallRPackage task ->
        task.group = GroupNames.DEPLOY
        task.description = "Install EHR Dependencies packages"
        task.packageNames = ["kinship2", "pedigree"]
        task.installScript = "test/install-ehr-dependencies.R"
}


project.tasks.register("installMedimmuneDependencies", InstallRPackage) {
    InstallRPackage task ->
        task.group = GroupNames.DEPLOY
        task.description = "Install MedImmune dependencies"
        task.packageNames = ["doBy", "gdata", "jsonlite", "openxlsx", "tidyr", "xml2"]
        task.installScript = "test/install-medimmune-dependencies.R"
}


project.tasks.register("installRSurvival", InstallRPackage) {
    InstallRPackage task ->
        task.group = GroupNames.DEPLOY
        task.description = "Install RSurvival and its dependencies"
        task.packageNames = ["survival"]
        task.installScript = "test/install-survival.R"
}

project.tasks.register("install") {
    Task task ->
        task.group = GroupNames.DEPLOY
        task.description = "Install R packages"
        task.dependsOn(
                project.tasks.installRLabKey,
                project.tasks.installRuminex,
                project.tasks.installKnitr,
                project.tasks.installEhrDependencies,
                project.tasks.installRSurvival,
                project.tasks.installMedimmuneDependencies
        )
}
