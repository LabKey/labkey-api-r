import org.apache.tools.ant.taskdefs.condition.Os

File latestDir = project.file("latest");
File buildOutputFile = new File(project.buildDir, "commands.out")

project.task(
        "check",
        group: "RBuild",
        description: "Run validation checks on the Rlabkey package",
        {Task task ->
            task.outputs.dir project.file("${latestDir}/Rlabkey.Rcheck")
            task.outputs.dir project.file("Rlabkey/src-i386")
            task.outputs.dir project.file("Rlabkey/src-x64")
            task.outputs.files project.fileTree(dir: "Rlabkey/src", includes: ["*.o", "*.dll"])
        }

).doLast {
    project.ant.exec(executable: "R", output: buildOutputFile)
                {
                    arg(line:"CMD check --no-examples --as-cran ${latestDir}/*.tar.gz")
                }
}


project.task(
        "build",
        group: "RBuild",
        description: "Build the Rlabkey package that can be installed and tested in R. Builds binary package on windows, source only on unix",
        {Task task ->
            task.inputs.files project.fileTree(dir: "Rlabkey", excludes: ["src-i386", "src-x64"]).files
            task.outputs.dir project.buildDir
            task.doFirst(
                    {
                        project.buildDir.mkdirs()
                        project.ant.exec(executable: "R", dir: project.buildDir, output: buildOutputFile)
                        {
                            arg(line: "CMD build ${project.projectDir}/Rlabkey")
                        }
                        project.copy {CopySpec copy ->
                            copy.from project.buildDir
                            copy.include '*.tar.gz'
                            copy.into latestDir
                        }
                        if (Os.isFamily(Os.FAMILY_WINDOWS))
                        {
                            project.ant.exec(executable: "R", dir: project.buildDir, output: buildOutputFile)
                            {
                                arg(line: "CMD INSTALL --build ${project.projectDir}/build/*.tar.gz")
                            }
                        }
                        project.copy {CopySpec copy ->
                            copy.from project.buildDir
                            copy.include '*.zip'
                            copy.into latestDir
                        }
                    }
            )
        }
)

project.tasks.check.dependsOn(project.tasks.build)

project.task(
        "clean",
        group: "RBuild",
        description: "Deletes all non-versioned files generated during the build process",
        type: Delete,
        {
            delete project.tasks.check
            delete project.tasks.build
        }
)

project.task(
        "install",
        group: "RBuild",
        description: "install the Rlabkey package to the local R instance. Must be run as administrator.",
        {
            doFirst {
                if (Os.isFamily(Os.FAMILY_WINDOWS))
                {
                    project.ant.exec(executable: "Rterm", dir: latestDir, input: project.file('test/instwin.r'), output: buildOutputFile)
                    {
                        arg(line: "--vanilla")
                    }
                }
                if (Os.isFamily(Os.FAMILY_UNIX))
                {
                    project.ant.exec(executable: "R", output: buildOutputFile)
                    {
                        arg(line: "CMD", "INSTALL Rlabkey")
                    }
                }
            }
        }
)
