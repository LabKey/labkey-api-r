## Rlabkey.README.txt
## July 2008
## Valerie Obenchain

# This document is an overview of how to use the functions that will eventually become the Rlabkey.R package.
# Rest assured that when this is an actual package, the documentation will look much more professional than this
# text file. 

# The steps for using these functions are as follows:
# 1. create .labkey file
# 2. install RCurl and rjson packages (if not already installed with your version of R)
# 3. From within an R session: (i) load RCurl and rjson, (ii) source mkpwd.R, makeUrl.R, labkey.selectRows.R,
# (iii) create encoded username/password with mkpwd.R, and (iv) use labkey.selectRows.R to get data.



##--------------------------------
## The .labkey file
##--------------------------------
# There are currently three R functions (separate files) that will make up the Rlabkey package: 
# mkpwd.R, makeUrl.R and labkey.selectRows.R. When labkey 8.3 is released, the mkpwd.R function will go away. 
# In the mean time, each user must create their own .labkey file which contains the username 
# and password in the following format:

username vobencha@fhcrc.org
password mypassword

# There is a space between username and vobencha@fhcrc.org and password and mypassword. These items are on 
# separate lines.





##------------------------------------------------
## Load (or install) RCurl and rjson
##------------------------------------------------
# Start up an R session however you like and load in the required RCurl and rjson packages. 

library(rjson)
library(RCurl)


# If you don't have these installed, there are a variety of ways
# to do so depending on what kind of system you are on. From within R, you can try:

chooseCRANmirror()
install.packages(c("RCurl","rjson"))

# The R packages are installed in a default location unless you specify otherwise. The R documentation
# has a good section about other options on their web site: http://www.r-project.org/. From here
# select "manuals" under Documentation then "an introduction to R". Section 6.3 has information for package
# installation on both unix and windows.
 



##------------------------------------------------
## Sample R sessions using labkey.selectRows.R
##------------------------------------------------

# After loading RCurl and rjson, source the Rlabkey files into the workspace. If the files are not 
# in the directory in which you are running R, you'll have to indicate the file path infront of the file name.

source('mkpwd.R')
source('labkey.selectRows.R')
source('makeUrl.R')

# Create encoded user password phrase
# The argument for this function is the location of your .labkey file entered as a string. 
# For example, mine is in my home directory:

mypwd <- mkpwd("/home/vobencha")


# Next use the labkey.selectRows function to get a dataset or view that has been have saved. 
# Required arguments for the labkey.selectRows function are mypwd, baseUrl, folderPath, schemaName and queryName.
# Optional arguments include viewName, columns, maxRows, rowOffset, colSort, colFilter. All are string values
# (ie, surrounded by quotes) except rowOffset and maxRows which are integers. Formats for all variables
# follow the formats specified in the Query Controller API actions.

### Example 1 ###-------------------------------------
baseUrl <- "https://atlas.scharp.org/cpas"
folderPath <- "/CHAVI/Studies/001/Study%20Data"
schemaName <- "study"
queryName <- "HIV+Test+Results"
viewName <- "valview2"
colSort <- "-HTRnatqn"
colFilter <- "HTRnatqn~lt=1000"
showAllRows <- "TRUE"


mydata <- labkey.selectRows(mypwd=mypwd, baseUrl=baseUrl, folderPath=folderPath, schemaName=schemaName, queryName=queryName, viewName=viewName, colSort=colSort, colFilter=colFilter, showAllRows=showAllRows)

# Note that the function call above only includes the variables we have specified (ie, we don't have maxRows or
# rowOffset specified so they aren't in the function call).  Alternatively you my not want to enter the 
# variables in the R workspace first but instead enter them in the function call like this:

mydata <- labkey.selectRows(mypwd=mypwd, baseUrl="https://atlas.scharp.org/cpas", folderPath="/CHAVI/Studies/001/Study%20Data", schemaName="study", queryName="HIV+Test+Results", viewName="valview2", colSort="-HTRnatqn", colFilter="HTRnatqn~lt=1000", showAllRows=TRUE)


# When the data are returned you can check the dimensions with dim:

dim(mydata)

# Maybe only look at the first 20 rows and first 3 columns (ignoring the lsid value in col 4):

mydata[1:20,c(1:3)]




### Example 2 ###-------------------------------------

baseUrl <- "https://atlas.scharp.org/cpas"
folderPath <- "/CHAVI/Studies/001/Study%20Data/"
schemaName <- "study"
queryName <- "Viral%20Load"
viewName <- "valview"
columns <- "ParticipantID,DrawDt,RawResultValue"
maxRows <- 8
rowOffset <- 10
showAllRows=FALSE


mydata <- labkey.selectRows(mypwd=mypwd, baseUrl=baseUrl, folderPath=folderPath, schemaName=schemaName, queryName=queryName, viewName=viewName, columns=columns, maxRows=maxRows, rowOffset=rowOffset, showAllRows=showAllRows)


##--------------------------
## Other comments
##--------------------------
# This command clears out all objects in the workspace. I like to use this between runs.
rm(list=ls())

# If you only want to clear out var1 you can use
rm(var1)

# Here is clean look at how a users R session would look with out all of the comments:
library(rjson)
library(RCurl)
source('mkpwd.R')
source('labkey.selectRows.R')
source('makeUrl.R')

mypwd <- mkpwd("/home/vobencha")

mydata <- labkey.selectRows(mypwd=mypwd, baseUrl="https://atlas.scharp.org/cpas", folderPath="/CHAVI/Studies/001/Study%20Data", schemaName="study", queryName="HIV+Test+Results", viewName="valview2", colSort="-HTRnatqn", colFilter="HTRnatqn~lt=1000", showAllRows=TRUE)
