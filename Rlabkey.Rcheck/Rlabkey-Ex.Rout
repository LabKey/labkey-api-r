
R version 2.8.1 (2008-12-22)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### * <HEADER>
> ###
> attach(NULL, name = "CheckExEnv")
> assign("nameEx", 
+        local({
+ 	   s <- "__{must remake R-ex/*.R}__"
+            function(new) {
+                if(!missing(new)) s <<- new else s
+            }
+        }),
+        pos = "CheckExEnv")
> ## Add some hooks to label plot pages for base and grid graphics
> assign("base_plot_hook",
+        function() {
+            pp <- par(c("mfg","mfcol","oma","mar"))
+            if(all(pp$mfg[1:2] == c(1, pp$mfcol[2]))) {
+                outer <- (oma4 <- pp$oma[4]) > 0; mar4 <- pp$mar[4]
+                mtext(sprintf("help(\"%s\")", nameEx()), side = 4,
+                      line = if(outer)max(1, oma4 - 1) else min(1, mar4 - 1),
+                outer = outer, adj = 1, cex = .8, col = "orchid", las=3)
+            }
+        },
+        pos = "CheckExEnv")
> assign("grid_plot_hook",
+        function() {
+            grid::pushViewport(grid::viewport(width=grid::unit(1, "npc") - 
+                               grid::unit(1, "lines"), x=0, just="left"))
+            grid::grid.text(sprintf("help(\"%s\")", nameEx()),
+                            x=grid::unit(1, "npc") + grid::unit(0.5, "lines"),
+                            y=grid::unit(0.8, "npc"), rot=90,
+                            gp=grid::gpar(col="orchid"))
+        },
+        pos = "CheckExEnv")
> setHook("plot.new",     get("base_plot_hook", pos = "CheckExEnv"))
> setHook("persp",        get("base_plot_hook", pos = "CheckExEnv"))
> setHook("grid.newpage", get("grid_plot_hook", pos = "CheckExEnv"))
> assign("cleanEx",
+        function(env = .GlobalEnv) {
+ 	   rm(list = ls(envir = env, all.names = TRUE), envir = env)
+            RNGkind("default", "default")
+ 	   set.seed(1)
+    	   options(warn = 1)
+ 	   .CheckExEnv <- as.environment("CheckExEnv")
+ 	   delayedAssign("T", stop("T used instead of TRUE"),
+ 		  assign.env = .CheckExEnv)
+ 	   delayedAssign("F", stop("F used instead of FALSE"),
+ 		  assign.env = .CheckExEnv)
+ 	   sch <- search()
+ 	   newitems <- sch[! sch %in% .oldSearch]
+ 	   for(item in rev(newitems))
+                eval(substitute(detach(item), list(item=item)))
+ 	   missitems <- .oldSearch[! .oldSearch %in% sch]
+ 	   if(length(missitems))
+ 	       warning("items ", paste(missitems, collapse=", "),
+ 		       " have been removed from the search path")
+        },
+        pos = "CheckExEnv")
> assign("ptime", proc.time(), pos = "CheckExEnv")
> ## at least one package changes these via ps.options(), so do this
> ## before loading the package.
> ## Use postscript as incomplete files may be viewable, unlike PDF.
> ## Choose a size that is close to on-screen devices, fix paper
> ps.options(width = 7, height = 7, paper = "a4", reset = TRUE)
> grDevices::postscript("Rlabkey-Ex.ps")
> 		      
> assign("par.postscript", graphics::par(no.readonly = TRUE), pos = "CheckExEnv")
> options(contrasts = c(unordered = "contr.treatment", ordered = "contr.poly"))
> options(warn = 1)    
> library('Rlabkey')
Loading required package: RCurl
Loading required package: rjson
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> assign(".oldNS", loadedNamespaces(), pos = 'CheckExEnv')
> cleanEx(); nameEx("labkey.deleteRows")
> ### * labkey.deleteRows
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: labkey.deleteRows
> ### Title: Delete rows of data from a labkey database
> ### Aliases: labkey.deleteRows
> ### Keywords: IO
> 
> ### ** Examples
> 
> ## Insert, update and delete
> # Note that users must have the necessary permissions in the database
> # to be able to modify data through the use of these functions
> 
> ### Not run
> #newrow <- data.frame(name="Frank", age=11, stringsAsFactors=FALSE)
> #labkey.insertRows(
> #baseUrl="https://atlas-test.scharp.org/cpas", 
> #folderPath="/CHAVI/Analysis/vobencha", 
> #schemaName="lists", 
> #queryName="testlist", 
> #toInsert=newrow)
> #
> #updaterow=data.frame(Key=4,name="Patty",age=11, stringsAsFactors=FALSE)
> #mydata <- labkey.updateRows(
> #baseUrl="https://atlas-test.scharp.org/cpas", 
> #folderPath="/CHAVI/Analysis/vobencha", 
> #schemaName="lists", 
> #queryName="testlist", 
> #toUpdate=updaterow)
> #
> #deleterow <- data.frame(Key=1, stringsAsFactors=FALSE)
> #mydata <- labkey.deleteRows(
> #baseUrl="https://atlas-test.scharp.org/cpas", 
> #folderPath="/CHAVI/Analysis/vobencha", 
> #schemaName="lists", 
> #queryName="testlist", 
> #toDelete=deleterow)
> 
> 
> 
> 
> cleanEx(); nameEx("labkey.executeSql")
> ### * labkey.executeSql
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: labkey.executeSql
> ### Title: Retrieve data from a labkey database using SQL commands
> ### Aliases: labkey.executeSql
> ### Keywords: IO
> 
> ### ** Examples
> 
> ## These example datasets are located at 
> ## https://www.labkey.org/project/home/Study/demo/begin.view?
> 
> ## Select participants who meet acute status requirements
> getacute <- labkey.executeSql(
+ baseUrl="https://www.labkey.org",
+ folderPath="/home/Study/demo",
+ schemaName="study",
+ sql = 'select "Status Assessment".ParticipantId, 
+ "Status Assessment".StatusMeetCriteria from "Status Assessment" where 
+ "Status Assessment".StatusMeetCriteria=\'Yes\'')
> 
> ## Compute average ages over different gender groups, 
> ## use column alias "Number" to rename the column
> getage <- labkey.executeSql(
+ baseUrl="https://www.labkey.org",
+ folderPath="/home/Study/demo",
+ schemaName="study",
+ sql = "select Demographics.Gender, avg(Demographics.Age) as Number from 
+ Demographics group by Demographics.Gender")
> 
> ## Get a list of participants with partner information 
> getpartners <- labkey.executeSql(
+ baseUrl="https://www.labkey.org",
+ folderPath="/home/Study/demo",
+ schemaName="study",
+ sql = 'select "Status Assessment".ParticipantID, 
+ "Status Assessment".StatusPartner1 from "Status Assessment" where 
+ "Status Assessment".StatusPartner1 is not null')
> 
> 
> 
> 
> cleanEx(); nameEx("labkey.insertRows")
> ### * labkey.insertRows
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: labkey.insertRows
> ### Title: Insert new rows of data into a labkey database
> ### Aliases: labkey.insertRows
> ### Keywords: IO
> 
> ### ** Examples
> 
> 
> ## Insert, update and delete
> # Note that users must have the necessary permissions in the database
> # to be able to modify data through the use of these functions
> 
> ### Not run
> #newrow <- data.frame(name="Frank", age=11, stringsAsFactors=FALSE)
> #labkey.insertRows(
> #baseUrl="https://atlas-test.scharp.org/cpas", 
> #folderPath="/CHAVI/Analysis/vobencha", 
> #schemaName="lists", 
> #queryName="testlist", 
> #toInsert=newrow)
> #
> #updaterow=data.frame(Key=4,name="Patty",age=11, stringsAsFactors=FALSE)
> #mydata <- labkey.updateRows(
> #baseUrl="https://atlas-test.scharp.org/cpas", 
> #folderPath="/CHAVI/Analysis/vobencha", 
> #schemaName="lists", 
> #queryName="testlist", 
> #toUpdate=updaterow)
> #
> #deleterow <- data.frame(Key=1, stringsAsFactors=FALSE)
> #mydata <- labkey.deleteRows(
> #baseUrl="https://atlas-test.scharp.org/cpas", 
> #folderPath="/CHAVI/Analysis/vobencha", 
> #schemaName="lists", 
> #queryName="testlist", 
> #toDelete=deleterow)
> 
> 
> 
> 
> cleanEx(); nameEx("labkey.selectRows")
> ### * labkey.selectRows
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: labkey.selectRows
> ### Title: Retrieve data from a labkey database
> ### Aliases: labkey.selectRows
> ### Keywords: IO
> 
> ### ** Examples
> 
> ## These example datasets are located at 
> ## https://www.labkey.org/project/home/Study/demo/begin.view?
> 
> ## Retrieve full HIV Test Results dataset
> fulldata <- labkey.selectRows(  
+ baseUrl="https://www.labkey.org", 
+ folderPath="/home/Study/demo", 
+ schemaName="study", 
+ queryName="HIV Test Results")
> 
> ## Specifying filters, max rows and selecting columns
> myfilters<- makeFilter(c("HIVLoadQuant","GREATER_THAN",500), 
+ c("HIVRapidTest","EQUAL","Positive"))
> smalldata <- labkey.selectRows( 
+ baseUrl="https://www.labkey.org", 
+ folderPath="/home/Study/demo", 
+ schemaName="study",     
+ queryName="HIV Test Results", 
+ colSelect=c("ParticipantId","HIVDate","HIVLoadQuant","HIVRapidTest"), 
+ maxRows=20,
+ colFilter=myfilters)
> 
> 
> 
> 
> 
> cleanEx(); nameEx("labkey.updateRows")
> ### * labkey.updateRows
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: labkey.updateRows
> ### Title: Update existing rows of data in a labkey database
> ### Aliases: labkey.updateRows
> ### Keywords: IO
> 
> ### ** Examples
> 
> ## Insert, update and delete
> # Note that users must have the necessary permissions in the database
> # to be able to modify data through the use of these functions
> 
> ### Not run
> #newrow <- data.frame(name="Frank", age=11, stringsAsFactors=FALSE)
> #labkey.insertRows(
> #baseUrl="https://atlas-test.scharp.org/cpas", 
> #folderPath="/CHAVI/Analysis/vobencha", 
> #schemaName="lists", 
> #queryName="testlist", 
> #toInsert=newrow)
> #
> #updaterow=data.frame(Key=4,name="Patty",age=11, stringsAsFactors=FALSE)
> #mydata <- labkey.updateRows(
> #baseUrl="https://atlas-test.scharp.org/cpas", 
> #folderPath="/CHAVI/Analysis/vobencha", 
> #schemaName="lists", 
> #queryName="testlist", 
> #toUpdate=updaterow)
> #
> #deleterow <- data.frame(Key=1, stringsAsFactors=FALSE)
> #mydata <- labkey.deleteRows(
> #baseUrl="https://atlas-test.scharp.org/cpas", 
> #folderPath="/CHAVI/Analysis/vobencha", 
> #schemaName="lists", 
> #queryName="testlist", 
> #toDelete=deleterow)
> 
> 
> 
> 
> cleanEx(); nameEx("makeFilter")
> ### * makeFilter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeFilter
> ### Title: Builds filters to be used in labkey.selectRows
> ### Aliases: makeFilter
> ### Keywords: file
> 
> ### ** Examples
> 
> ## These example datasets are located at 
> ## https://www.labkey.org/project/home/Study/demo/begin.view?
> 
> ## Two filters:
> filter1<- makeFilter(c("HIVLoadQuant","GREATER_THAN",500), 
+ c("HIVRapidTest","EQUAL","Positive"))
> 
> ## Using "equals one of" operator:
> filter2 <- makeFilter(c("HIVLoadIneq","EQUALS_ONE_OF","Equals ; Less than"))
> 
> ## Using "not missing" operator:
> filter3 <- makeFilter(c("HIVRapidTest","NOT_MISSING","")) 
> 
> ## Apply a filter in labkey.selectRows function
> getdata <- labkey.selectRows(
+ baseUrl="https://www.labkey.org", 
+ folderPath="/home/Study/demo", 
+ schemaName="study", 
+ queryName="HIV Test Results", 
+ colSelect=c("ParticipantId","HIVDate","HIVLoadQuant","HIVRapidTest"), 
+ colFilter=filter3)
> 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.088 0.012 2.054 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
